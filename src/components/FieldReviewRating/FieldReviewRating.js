import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { intlShape, injectIntl } from '../../util/reactIntl';
import { Field } from 'react-final-form';
import classNames from 'classnames';
import { IconReviewStar, ValidationError } from '../../components';
import { styled } from '@mui/material/styles';

import css from './FieldReviewRating.module.css';
import { Rating } from '@mui/material';

const FieldReviewRatingComponent = props => {
  /* eslint-disable no-unused-vars */
  const { rootClassName, className, customErrorText, label, input, meta } = props;
  /* eslint-enable no-unused-vars */

  const { touched, error } = meta;
  const errorText = customErrorText || error;
  const fieldMeta = { touched, error: errorText };

  const { value } = input;
  const classes = classNames(rootClassName || css.root, className);

  const StyledRating = styled(Rating)({
    '& .MuiRating-iconFilled': {
      color: 'var(--marketplaceColor)',
    },
    '& .MuiRating-iconHover': {
      color: 'var(--marketplaceColor)',
    },
    '& label': {
      margin: 0,
    },
  });

  return (
    <div className={classes}>
      <fieldset className={css.ratingFieldSet}>
        {label ? <legend>{label}</legend> : null}
        <div className={css.rating}>
          <StyledRating
            name="half-rating"
            size="large"
            onChange={(event, newValue) => {
              input.onChange(newValue);
            }}
            value={value}
          />
        </div>
      </fieldset>
      <ValidationError fieldMeta={fieldMeta} />
    </div>
  );
};

FieldReviewRatingComponent.defaultProps = {
  rootClassName: null,
  className: null,
  customErrorText: null,
  label: null,
};

const { string, shape, func, object } = PropTypes;

FieldReviewRatingComponent.propTypes = {
  rootClassName: string,
  className: string,
  id: string.isRequired,
  label: string,

  // Error message that can be manually passed to input field,
  // overrides default validation message
  customErrorText: string,

  // Generated by final-form's Field component
  input: shape({
    onChange: func.isRequired,
  }).isRequired,
  meta: object.isRequired,

  // from injectIntl
  intl: intlShape.isRequired,
};

const FieldReviewRating = props => {
  return <Field component={FieldReviewRatingComponent} {...props} />;
};

export default injectIntl(FieldReviewRating);
